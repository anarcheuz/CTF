import socket
from binascii import *
import struct
import time 
import telnetlib

s=None
leak=None
arch=None

def init(host, port, archi='x86'):
    global s
    global arch
    arch = archi
    s = socket.create_connection((host,port))
    return s

def init_leak(l):
    global leak
    leak = l

def q(a):
    return struct.pack("<I", a)

def r(a):
    from binascii import hexlify
    return int('0x'+hexlify(a[::-1]),16)

def read_until(string=""):
    global s
    text=""
    while text.find(string) == -1: 
        res = s.recv(1024)
        if res == "":
            return text
        text += res
    return text

def interact():
    global s
    t = telnetlib.Telnet()
    t.sock = s
    t.interact()
    
def get_elf(addr):
    global s
    start = addr & 0xfffff000
    pages = 0
    while leak(start-pages)[0:4] != '\x7fELF':
        pages += 0x1000
    return start-pages

def get_prog_headers(base):
    global s
    global arch
    if arch == 'x86':
        return r(leak(base+28))
    elif arch == 'x64':
        return r(leak(base+32))


def get_dynamic(prog_headers):
    global s
    global arch
    i = 0
    if arch == 'x86':
        add = 32
        field_off = 4
    elif arch == 'x64':
        add = 56
        field_off = 8

    while 1:
        section_type = r(leak(prog_headers+i))
        if section_type == 2:
            return r(leak(prog_headers+i+field_off))
        i+=add

def get_str_symtab(dynamic):
    global s
    global arch
    i = strtab = symtab = 0
    if arch == 'x86':
        add = 8
        field_off = 4
    elif arch == 'x64':
        add = 16
        field_off = 8

    while strtab == 0 or symtab == 0:
        typeDyn = r(leak(dynamic+i))
        if typeDyn == 5:
            strtab = r(leak(dynamic+i+field_off)[:4])
        if typeDyn == 6:
            symtab = r(leak(dynamic+i+field_off)[:4])
        i+=add

    return (strtab,symtab)

def get_symbol(symbol, strtab, symtab):
    global s
    global arch
    i=16*1400
    
    if arch =='x86':
        add = 16
        field_off = 4
    elif arch == 'x64':
        add = 24
        field_off = 8
    while 1:
        l = leak(symtab+i)
        if l != '':
            offset = r(l)
            l = leak(strtab+offset)
            #print l + ' : ' + str(i/16)
            time.sleep(0.01)
            if l == symbol:
                return r(leak(symtab+i+field_off))
        i+=add



