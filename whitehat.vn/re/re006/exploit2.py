#!/usr/bin/env python2

def encode(buf):
	_data_start__ = "ZvHdgJlV73h6sFSABa/5obeuLpxj+mCDzKXG9ki2EWqR1nUQ4PfTr8OMytI0NwcY"
	mod_table = [2, 1, 0]

	size = len(buf)
	new_size = 4 * ((size + 2) / 3)
	dst = [0] * new_size

	j = 0
	k = 0
	while j < size: 
		if j >= size:
			first = 0
		else:
			first = buf[j] 
			j+=1

		if j >= size:
			second = 0
		else:
			second = buf[j] 
			j+=1

		if j >= size:
			third = 0
		else:
			third = buf[j]
			j += 1

		v7 = (first << 16) + (second << 8) + third
		dst[k] = _data_start__[(v7 >> 18) & 0x3F] # 0x3f == 6 bits
		dst[k+1] = _data_start__[(v7 >> 12) & 0x3F]
		dst[k+2] = _data_start__[(v7 >> 6) & 0x3F]
		dst[k+3] = _data_start__[third & 0x3F]
		k += 4

	i = 0
	while mod_table[size % 3] > i:
		dst[new_size - i - 1] = '='
		i+=1

	return dst


def decode(buf):
	_data_start__ = "ZvHdgJlV73h6sFSABa/5obeuLpxj+mCDzKXG9ki2EWqR1nUQ4PfTr8OMytI0NwcY"
	buf = buf.replace("=", "")
	blocks = [buf[i:i+4] for i in range(0, len(buf), 4)]
	res = ""

	for block in blocks:
		index1 = _data_start__.find(block[0])
		index2 = _data_start__.find(block[1])
		index3 = _data_start__.find(block[2])
		if len(block) == 3:
			index4 = 0
		else :
			index4 = _data_start__.find(block[3])

		tmp = (index1 << 18) + (index2 << 12) + (index3 << 6) + index4
		res += chr((tmp >> 16) & 0xff)
		res += chr((tmp >> 8) & 0xff)
		res += chr(tmp & 0xff)


	return res





print "".join(encode([0x41, 0x41, 0x41, 0x41]))
print decode("BoJvBBZ=")

#pObruM3kxMaDL2kDmlKW+8wXLuFkFGaDxObtuOK8xdN=

print decode("pObruM3kxMaDL2kDmlKW+8wXLuFkFGaDxObtuOK8xdN=")
#get_rekt_by_this_base64_key_huh?